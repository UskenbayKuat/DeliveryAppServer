// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationCertificate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Седан"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Минивэн"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Фургон"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Алматы"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Шымкент"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Нур-Султан"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.ClientPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FinishCityId")
                        .HasColumnType("integer");

                    b.Property<string>("HubId")
                        .HasColumnType("text");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("StartCityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FinishCityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PackageId");

                    b.HasIndex("StartCityId");

                    b.ToTable("ClientPackages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("DriverPhoto")
                        .HasColumnType("text");

                    b.Property<string>("DrivingLicenceScanPath")
                        .HasColumnType("text");

                    b.Property<string>("IdentityCardBackScanPath")
                        .HasColumnType("text");

                    b.Property<string>("IdentityCardFaceScanPath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.DriverKit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("KitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("KitId");

                    b.ToTable("DriversKits");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Kit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUnlimited")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Kits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsUnlimited = false,
                            Name = "Light",
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            IsUnlimited = false,
                            Name = "Standard ",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 3,
                            IsUnlimited = false,
                            Name = "Premium",
                            Quantity = 15
                        },
                        new
                        {
                            Id = 4,
                            IsUnlimited = true,
                            Name = "Unlimited",
                            Quantity = 999999
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ClientPackageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DelayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DriverKitId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("OrderCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("OrderStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientPackageId");

                    b.HasIndex("DriverKitId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Length")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FinishCityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StartCityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinishCityId");

                    b.HasIndex("StartCityId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinishCityId = 2,
                            Price = 1000m,
                            StartCityId = 1
                        },
                        new
                        {
                            Id = 2,
                            FinishCityId = 3,
                            Price = 2000m,
                            StartCityId = 1
                        },
                        new
                        {
                            Id = 3,
                            FinishCityId = 1,
                            Price = 1000m,
                            StartCityId = 2
                        },
                        new
                        {
                            Id = 4,
                            FinishCityId = 1,
                            Price = 2000m,
                            StartCityId = 3
                        },
                        new
                        {
                            Id = 5,
                            FinishCityId = 3,
                            Price = 2000m,
                            StartCityId = 2
                        },
                        new
                        {
                            Id = 6,
                            FinishCityId = 2,
                            Price = 2000m,
                            StartCityId = 3
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.RouteTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("FinishCityId")
                        .HasColumnType("integer");

                    b.Property<string>("HubId")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("StartCityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TripTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("FinishCityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StartCityId");

                    b.ToTable("RouteTrips");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Car", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.ClientPackage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "FinishCity")
                        .WithMany()
                        .HasForeignKey("FinishCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ApplicationCore.Entities.AppEntities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "StartCity")
                        .WithMany()
                        .HasForeignKey("StartCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("Client");

                    b.Navigation("FinishCity");

                    b.Navigation("Location");

                    b.Navigation("Package");

                    b.Navigation("StartCity");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Driver", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.Car", "Car")
                        .WithOne("Driver")
                        .HasForeignKey("ApplicationCore.Entities.AppEntities.Driver", "CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.DriverKit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Kit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.Driver", null)
                        .WithMany("Kits")
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.ClientPackage", "ClientPackage")
                        .WithMany()
                        .HasForeignKey("ClientPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.DriverKit", "DriverKit")
                        .WithMany()
                        .HasForeignKey("DriverKitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientPackage");

                    b.Navigation("DriverKit");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Route", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "FinishCity")
                        .WithMany()
                        .HasForeignKey("FinishCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "StartCity")
                        .WithMany()
                        .HasForeignKey("StartCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinishCity");

                    b.Navigation("StartCity");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.RouteTrip", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AppEntities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "FinishCity")
                        .WithMany()
                        .HasForeignKey("FinishCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AppEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ApplicationCore.Entities.AppEntities.City", "StartCity")
                        .WithMany()
                        .HasForeignKey("StartCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("FinishCity");

                    b.Navigation("Location");

                    b.Navigation("StartCity");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Car", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppEntities.Driver", b =>
                {
                    b.Navigation("Kits");
                });
#pragma warning restore 612, 618
        }
    }
}
